#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: d3fa81a3-d18b-45a8-9072-35bfeb5eae26
# Source File: ..\Software.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
7gEAAB+LCAAAAAAABACNkV1PwyAUhu+X7D803Neuq9WaUC7cnPHCj2yLt+a0PRgMhQaoun8vtcx0
MTHe8cDL84YD3WKt39Ec1uCAzWdRRJ+MfsPafYPHZzRWaMVSmhyX4WQjJN6tWZNxKFLI4iYtqvg8
hyK+Wlwu4yyvOFY5Ai4vaBLC4Wro2B86ZAuaTHEitwECRlvkaFDV+AAtloRE172QTUkWhO0cGNd3
Z521Y9ffV1cgZXwPQm20aV86y6eu476X8X/LbqWuQHpVOlFFK922oJqbT4dqGF1J9qZHwsa09Q3p
ScMI47t/xjLSoxGvQoEcAkMv22nuPsCgl3Q+SJNfifmMJif/+wUy4QuU7gEAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.81
     Generated on:       29/05/2016 9:07 AM
     Generated by:       yli
     Organization:       ddb
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
xQQAAB+LCAAAAAAABAC9lMlqwzAQQO+F/oPJ2Xip4jgBxxBSciltQ13aXsf22IhqCSM5wX9fZyEJ
LXQJ1Ogyo5Hm8ZCY5AkLvUZqb8GC0wWGazUd3AzS6yvHSR6J11yBWHCBDyAxzSyQbVbeypjE/1Ld
3ZkZgzIXHM0uP+20adYai9K7BwU1SlTWmzVWS7Ad1HVeDnTmBdvlOvNG2IZwqrCxBMJ1lk3Xt7jD
9lm/Y3cwzCs2jkZQstEQWZT4R9JnsjSFJsHzE2X4W0oexxAV0SicsCEG48k3lL1fHwzvlatSb4y3
0CRNL8TtD+kHRLDhqr6EFbAqquIqDMsoAAY/s96k6MeJExZWU5shrXmBFz3Zn+3mmrAXvYPVknSn
9g9ux3Q/VRL/fGylH3nEhp/FBAAA#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
qh8AAB+LCAAAAAAABADVWU1P40YYvlfqf7B8jkwckxCkYAkCFNTNghpKe0PjeBKmjD10bAPZE4fS
altt97CVdrWioh/aUwUctmqrsrQ/puSDU/9C34kTyBdknE1YKhSS2PPO834888w7ceYjXGA7mJfn
kY8U+OAR5s6oCdV8/z1FyaxwUiIuoouE4ofIwWYOEXeRcUfb9oqZiZ7boZH1GS74il/exjNqvuz5
2NE+Ia7Ndj1N2Ib/Y0q/WzFlvenDpBYXfzElG1A/4HjGxYHPEY0pq4FFSeFDXF5jW9idsaamULKQ
TOnTxiSOp6dVxQVXZtSWq6pS2CTU5jBUzTLX54x6YXjg6ypn25j75aZNlhLs+nnyCKtmKqnHlEkj
mZloDbrBSIDMMW5jnvfLFCwXyR625wmirDTQOIf2iAN4c2wPDBH18GAT4kY1EcVRr4o3cHjeR9xf
ZR7xoRKqmYWcQHAFjrE70HYN7/mqOTuv1E9+rJ08rx7+WTl5XP/5oH5+enH2W/XxL9WnT5V1XYv3
zrSwA0DNaR4wZKvmiivehc+Ne5mJxltrfCfRZleXFx6uwWdPg4lLHHveHOIrwGmKysAatgsxbGJK
lbwf2IS1Uy2hpXUZrrkBpS1+bTdBLMRZCKLfRrXeTD1gBRQmWE8lY4qRnu5JyU2V7IMtYRvyOiHA
EobM+JDOOcQ/D3AvyfrUHlnLro2BljKhCKY0y6Oala9/qJ+fX/xxrGmahO06ogG41rs4+wwlHrEa
y7LvUuniHShAYatvgjcat7ooOBFysD8j+0nfXOD7zB27+FkNmMuvntTOT4ZmpRGNlO2Y0myckiXj
NbfSktxSTWlfPvYw0CRAtEH5OVTYyjLKuGqu8UCWMu3hj4YrD5CF6dipQgVK/fTX6otvozEFHMHN
NC2R0iaFly+R606C6TK1D/nV5qg0vYxUg8SR+DUlzS/Y1i7334Qu/fvmZfXoVe3wm8rRUeXLg6vd
r/byi3DruzwQzPhnf79347vfKnLx9/eV4xfDqkjSSA8jIyHoOGUkJV1maV9GJyMh5GhkRLT2H3Bi
rxO8O3bK2ABWArAdAIvYD0GuAsddwgg6aW8JCzkRxc0xGwo8G/hMfIsmMAkhMPLU63BemnupuC7I
J9OLXLOv7+gOOkCnKnIGV5rM6PBuo/t+J0u6J2tLbY4FHu4/Zd9R/6uOByS4fvrTW2lVWkb/26Uq
xBynVE1KS5W0L6OTqhByNFIlgoBj7djJkmdFfxdxPCxREtPTkYjSwpMmiZ6C6BK9Z+TbWNLLqfvd
cja6osrB68vvTirHz9+qFCkZtW7vIjuxI5Yl2uJNyLeTA7yKXs4scyx2FwtqBfyEgrilECfyQcJB
vrBecBEc1e2bVajLchmw2iaGAeJKZ0byPoeZY4rjFRinxBpF1GYzjwpIgEB8hx6k37kHecx3MAe1
ihv3yJd7lBc90eVL5CY2LXNYCfWtayXKS1saep+EjI5eS1vv6Pu945z+Xv/rWeXgVfXZk4vzw9rr
s9rZ0dC/jkFZkvJHi5sdkK+QkYq8+Uh1EOHmI+VbR307vwwudR7tYPGoKHw0MvaaewBXBDi7Aadf
PfNp72SFOyvQynaN3Qivt7ezncHOeh52wAvstWZtXimbzahyyEUl7IC5Js6uToM219EZstEZulU0
0skUso3UJBanzCukbuQRqtgtKGF8d4ExcmYMRhS/ldwNEEe7ja0nOlbcKCaLU0Vdt5NxZKDBWJ86
9G5iIhwWCONlsfORAh6qZJGjyzKO7yS8ZlSgiBDaGGK7+hqqSmai/dm8+R/9gP+dqh8AAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		$local:type = [ProgressBarOverlay]
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$progressbaroverlay1 = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$button重置 = New-Object 'System.Windows.Forms.Button'
	$label说明 = New-Object 'System.Windows.Forms.Label'
	$button保存 = New-Object 'System.Windows.Forms.Button'
	$datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
	$button查询 = New-Object 'System.Windows.Forms.Button'
	$Software = New-Object 'System.Windows.Forms.TextBox'
	$label软件关键字 = New-Object 'System.Windows.Forms.Label'
	$OperatingSystem = New-Object 'System.Windows.Forms.ComboBox'
	$label请输入操作系统 = New-Object 'System.Windows.Forms.Label'
	$savefiledialog1 = New-Object 'System.Windows.Forms.SaveFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$OnLoadFormEvent={
	#TODO: Initialize Form Controls here
	
	}
	
	
	$obj=""
	
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function Load-Chart
	{
	<#
		.SYNOPSIS
			This functions helps you plot points on a chart
	
		.DESCRIPTION
			Use the function to plot points on a chart or add more charts to a chart control
	
		.PARAMETER  ChartControl
			The Chart Control you when to add points to
	
		.PARAMETER  XPoints
			Set the X Axis Points. These can be strings or numerical values.
	
		.PARAMETER  YPoints
			Set the Y Axis Points. These can be strings or numerical values.
		
		.PARAMETER  XTitle
			Set the Title for the X Axis.
	
		.PARAMETER  YTitle
			Set the Title for the Y Axis.
		
		.PARAMETER  Title
			Set the Title for the chart.
		
		.PARAMETER  ChartType
			Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
	
		.PARAMETER SeriesIndex
			Set the settings of a particular Series and corresponding ChartArea
	
		.PARAMETER TitleIndex
			Set the settings of a particular Title
		
		.PARAMETER SeriesName
			Set the settings of a particular Series using its name and corresponding ChartArea. 
			The Series will be created if not found.
			If SeriesIndex is set, it will replace the Series' name if the Series does not exist
		
		.PARAMETER Enable3D
			The chart will be rendered in 3D.
		
		.PARAMETER Disable3D
			The chart will be rendered in 2D.	
		
		.PARAMETER Append
			When this switch is used, a new ChartArea is added to Chart Control.
	
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
		
	#>
		Param( #$XPoints, $YPoints, $XTitle, $YTitle, $Title, $ChartStyle)
		 	[ValidateNotNull()]
			[Parameter(Position=1,Mandatory=$true)]
	  		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
			,
			[ValidateNotNull()]
			[Parameter(Position=2,Mandatory=$true)]
	  		$XPoints
			,
			[Parameter(Position=3,Mandatory=$true)]
	  		$YPoints
			,
			[Parameter(Position=4,Mandatory=$false)]
	  		[string]$XTitle
			,
			[Parameter(Position=5,Mandatory=$false)]
	  		[string]$YTitle
			,
			[Parameter(Position=6,Mandatory=$false)]
	  		[string]$Title
			,
			[Parameter(Position=7,Mandatory=$false)]
	  		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType
			,
			[Parameter(Position=8,Mandatory=$false)]
	  		$SeriesIndex = -1
			,
			[Parameter(Position=9,Mandatory=$false)]
	  		$TitleIndex = 0,
			[Parameter(Mandatory=$false)]
	  		[string]$SeriesName = $null,
			[switch]$Enable3D,
			[switch]$Disable3D,
			[switch]$Append)
	
		$ChartAreaIndex = 0
		if($Append)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			$ChartArea = $ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
			$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
			$Series = $ChartControl.Series.Add($name) 
			$SeriesIndex = $ChartControl.Series.Count - 1
	
			$Series.ChartArea = $ChartArea.Name
			
			if($Title)
			{
				$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1	
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
		}
		else
		{
			if($ChartControl.ChartAreas.Count -eq  0)
			{
				$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
				[void]$ChartControl.ChartAreas.Add($name)
				$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			}	
			
			if($ChartControl.Series.Count -eq 0)
			{
				if(-not $SeriesName)
				{
					$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
				}
				
				$Series = $ChartControl.Series.Add($SeriesName) 
				$SeriesIndex = $ChartControl.Series.Count - 1
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			elseif($SeriesName)
			{
				$Series = $ChartControl.Series.FindByName($SeriesName)
					
				if($Series -eq $null)
				{
					if(($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
					{
						$Series = $ChartControl.Series[$SeriesIndex]
						$Series.Name = $SeriesName
					}
					else
					{
						$Series = $ChartControl.Series.Add($SeriesName)
						$SeriesIndex = $ChartControl.Series.Count - 1
					}
					
					$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
				}
				else
				{
					$SeriesIndex = $ChartControl.Series.IndexOf($Series)
					$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
				}		
			}
		}
		
		if(($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
		{
			$SeriesIndex = 0
		}
		
		$Series = $ChartControl.Series[$SeriesIndex]
		$Series.Points.Clear()
		$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
		if($Enable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $true
		}
		elseif($Disable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $false
		}
		
		if($Title)
		{
			if($ChartControl.Titles.Count -eq 0)
			{
				#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
			
			$ChartControl.Titles[$TitleIndex].Text = $Title
		}
		
		if($ChartType)
		{
			$Series.ChartType = $ChartType
		}
		
		if($XTitle)
		{
			$ChartArea.AxisX.Title = $XTitle
		}
		
		if($YTitle)
		{
			$ChartArea.AxisY.Title = $YTitle
		}
		
		if($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($XPoints)
			$XPoints = $array
		}
		
		if($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($YPoints)
			$YPoints = $array
		}
		
		$Series.Points.DataBindXY($XPoints, $YPoints)
	
	}
	
	
	function Clear-Chart
	{
	<#
		.SYNOPSIS
			This function clears the contents of the chart
	
		.DESCRIPTION
			Use the function to remove contents from the chart control
	
		.PARAMETER  ChartControl
			The Chart Control to clear
	
		.PARAMETER  LeaveSingleChart
			Leaves the first chart and removes all others from the control
		
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	#>
		Param (	
		[ValidateNotNull()]
		[Parameter(Position=1,Mandatory=$true)]
	  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
		,
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]$LeaveSingleChart
		)
		
		$count = 0	
		if($LeaveSingleChart)
		{
			$count = 1
		}
		
		while($ChartControl.Series.Count -gt $count)
		{
			$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
		}
		
		while($ChartControl.ChartAreas.Count -gt $count)
		{
			$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
		}
		
		while($ChartControl.Titles.Count -gt $count)
		{
			$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
		}
		
		if($ChartControl.Series.Count -gt 0)
		{
			$ChartControl.Series[0].Points.Clear()
		}
	}
	
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	
	
	function Get-Software
	{
		
		[cmdletbinding()]
		
		param (
			[parameter(mandatory = $true, position = 1)][string]$software,
			[string]$computername = "*",
			[string]$OS
		)
		
		
		Write-Verbose "Scanning Computers..."
	
		
		if ($computername -ne '*')
		{
			$a = Get-ADComputer -Filter "operatingsystem -like '*$OS*' -and name -like '*$computername*' " -Properties operatingsystem, ipv4address | Where-Object{ $_.ipv4address -ne $null } | select -ExpandProperty name
		}
		else
		{
			
			$a = Get-ADComputer -Filter "operatingsystem -like '*$OS*' " -Properties operatingsystem, ipv4address | Where-Object{ $_.ipv4address -ne $null } | select -ExpandProperty name
			
		}
		
		$progressbaroverlay1.Maximum=100
		$progressbaroverlay1.Value=20
	
		#$MainForm.Refresh()
		Write-Verbose "Scanning Software ..."
		
		$s = Invoke-Command -ComputerName $a -erroraction SilentlyContinue -ErrorVariable disconnect{
			
			
			param ([string]$name)
			if ([System.IntPtr]::Size -eq 4)
			{
				Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object{ $_.displayname -like "*$name*" } | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate
				
				
			}
			else
			{
				Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object{ $_.displayname -like "*$name*" } | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate
				
			}
			
			
			
		} -ArgumentList $software
		
		$progressbaroverlay1.Value=80
		
		#$MainForm.Refresh()
		
		
		#Write-Verbose "Disconnected Computers"
		
		#$disconnect.targetobject
		
		$progressbaroverlay1.Value | Out-String|Write-Host
		
		$s 
		
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	
	$datagridview1_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if ($datagridview1.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridview1.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
			
			$datagridview1.Sort($datagridview1.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	
	
	$button查询_Click={
		#TODO: Place custom script here
		$progressbaroverlay1.Visible = $true
		
		
		$MainForm.Refresh()
		$result = Get-Software -OS $OperatingSystem.Text -software $Software.Text -Verbose
		
		$progressbaroverlay1.Value = 90
		
		
		if ($result -ne $null)
		{
			$table = ConvertTo-DataTable -InputObject $result
			Load-DataGridView -DataGridView $datagridview1 -Item $table
			$progressbaroverlay1.Visible = $false
		}
		
	}
	
	$datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		
	}
	
	$savefiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	
	
	$datagridview1_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		#TODO: Place custom script here
		
	}
	
	$picturebox1_Click={
		#TODO: Place custom script here
		
	}
	
	
	
	Function Set-FileName($initialDirectory)
	{
		[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") |Out-Null
		
		$savefiledialog1.InitialDirectory = $initialDirectory
		$savefiledialog1.Filter="All files (*.*) | *.*"
		$savefiledialog1.ShowDialog() | Out-Null
		$savefiledialog1.FileName
		
		#model：Set-FileName -initialDirectory "D:\Scripts\例子"
	}
	
	$button保存_Click = {
		#TODO: Place custom script here
		$file = set-FileName
		Write-Verbose "Print Out"
		$datagridview1.Rows |
		select -expand DataBoundItem |
		export-csv $file -NoType
		
	}
	
	$button重置_Click={
		#TODO: Place custom script here
		$OperatingSystem.Text = ""
		$Software.Text=""
		$datagridview1.DataSource=$null
		
	}
	
	$progressbaroverlay1_Click={
		#TODO: Place custom script here
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_Software = $Software.Text
		$script:MainForm_OperatingSystem = $OperatingSystem.Text
		$script:MainForm_OperatingSystem_SelectedItem = $OperatingSystem.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$progressbaroverlay1.remove_Click($progressbaroverlay1_Click)
			$button重置.remove_Click($button重置_Click)
			$button保存.remove_Click($button保存_Click)
			$datagridview1.remove_CellContentClick($datagridview1_CellContentClick)
			$datagridview1.remove_ColumnHeaderMouseClick($datagridview1_ColumnHeaderMouseClick)
			$button查询.remove_Click($button查询_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$savefiledialog1.remove_FileOk($savefiledialog1_FileOk)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($progressbaroverlay1)
	$MainForm.Controls.Add($button重置)
	$MainForm.Controls.Add($label说明)
	$MainForm.Controls.Add($button保存)
	$MainForm.Controls.Add($datagridview1)
	$MainForm.Controls.Add($button查询)
	$MainForm.Controls.Add($Software)
	$MainForm.Controls.Add($label软件关键字)
	$MainForm.Controls.Add($OperatingSystem)
	$MainForm.Controls.Add($label请输入操作系统)
	$MainForm.ClientSize = '651, 435'
	$MainForm.FormBorderStyle = 'FixedDialog'
	$MainForm.MaximizeBox = $False
	$MainForm.MinimizeBox = $False
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "AD 计算机安装软件扫描 V1.0"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# progressbaroverlay1
	#
	$progressbaroverlay1.Location = '165, 389'
	$progressbaroverlay1.Name = "progressbaroverlay1"
	$progressbaroverlay1.Size = '265, 23'
	$progressbaroverlay1.Style = 'Marquee'
	$progressbaroverlay1.TabIndex = 9
	$progressbaroverlay1.TextOverlay = "加载中..."
	$progressbaroverlay1.Value = 5
	$progressbaroverlay1.Visible = $False
	$progressbaroverlay1.add_Click($progressbaroverlay1_Click)
	#
	# button重置
	#
	$button重置.Location = '13, 389'
	$button重置.Name = "button重置"
	$button重置.Size = '75, 23'
	$button重置.TabIndex = 8
	$button重置.Text = "重置"
	$button重置.UseVisualStyleBackColor = $True
	$button重置.add_Click($button重置_Click)
	#
	# label说明
	#
	$label说明.ForeColor = 'Highlight'
	$label说明.Location = '13, 13'
	$label说明.Name = "label说明"
	$label说明.Size = '363, 38'
	$label说明.TabIndex = 7
	$label说明.Text = "装逼说明：查看域内计算机的软件配置　"
	#
	# button保存
	#
	$button保存.Location = '538, 389'
	$button保存.Name = "button保存"
	$button保存.Size = '75, 23'
	$button保存.TabIndex = 6
	$button保存.Text = "保存"
	$button保存.UseVisualStyleBackColor = $True
	$button保存.add_Click($button保存_Click)
	#
	# datagridview1
	#
	$datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview1.Location = '12, 139'
	$datagridview1.Name = "datagridview1"
	$datagridview1.Size = '601, 235'
	$datagridview1.TabIndex = 5
	$datagridview1.add_CellContentClick($datagridview1_CellContentClick)
	$datagridview1.add_ColumnHeaderMouseClick($datagridview1_ColumnHeaderMouseClick)
	#
	# button查询
	#
	$button查询.Location = '538, 87'
	$button查询.Name = "button查询"
	$button查询.Size = '75, 23'
	$button查询.TabIndex = 4
	$button查询.Text = "查询"
	$button查询.UseVisualStyleBackColor = $True
	$button查询.add_Click($button查询_Click)
	#
	# Software
	#
	$Software.Location = '299, 87'
	$Software.Name = "Software"
	$Software.Size = '160, 20'
	$Software.TabIndex = 3
	#
	# label软件关键字
	#
	$label软件关键字.Location = '299, 61'
	$label软件关键字.Name = "label软件关键字"
	$label软件关键字.Size = '160, 23'
	$label软件关键字.TabIndex = 2
	$label软件关键字.Text = "软件关键字"
	#
	# OperatingSystem
	#
	$OperatingSystem.FormattingEnabled = $True
	[void]$OperatingSystem.Items.Add("Windows 7")
	[void]$OperatingSystem.Items.Add("Windows 8")
	[void]$OperatingSystem.Items.Add("Windows Server 2003")
	[void]$OperatingSystem.Items.Add("Windows Server 2008")
	[void]$OperatingSystem.Items.Add("Windows Server 2012")
	$OperatingSystem.Location = '12, 86'
	$OperatingSystem.Name = "OperatingSystem"
	$OperatingSystem.Size = '188, 21'
	$OperatingSystem.TabIndex = 1
	#
	# label请输入操作系统
	#
	$label请输入操作系统.Location = '12, 59'
	$label请输入操作系统.Name = "label请输入操作系统"
	$label请输入操作系统.Size = '136, 23'
	$label请输入操作系统.TabIndex = 0
	$label请输入操作系统.Text = "请输入操作系统"
	#
	# savefiledialog1
	#
	$savefiledialog1.add_FileOk($savefiledialog1_FileOk)
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
