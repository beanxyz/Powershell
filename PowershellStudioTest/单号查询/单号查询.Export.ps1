#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 79834c25-a4eb-4ac2-901b-b4f1d9eb5e98
# Source File: ..\单号查询.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
8gEAAB+LCAAAAAAABACNkU9LwzAYh++DfYeSe207O1why8HNiQf/MIdXedu+lUialKQV9yHEk2dB
8OzRTzTxY5jaTDoE8ZYn+eX5kTd0iZm6Q72eQw1sOPA8eqHVLWb1N1i8Qm24kiyiwXbpThZc4Mmc
HSST/TgbjX2IMfVjyEZ+Ekapn8ZFlCeYjjGZ0MCF3VXXsVpXyEIa9LEnNw4cekssUKPM8AxKnBLi
HTZc5FMSEnZZg66baq8ypuv6++oMhPBPgcuF0uV1ZYq+a7tvZcW/ZcdCpSCsKuqpvJkqS5D50X2N
sh3dlKx0g4R1aWMbop2GDrp3/4ylo3PNb7gE0QbaXrZ5eNo8vn88v36+vVhRZcM0+JUaDmiw88df
vwaTqPIBAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.81
     Generated on:       30/05/2016 9:09 AM
     Generated by:       yli
     Organization:       ddb
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
xQQAAB+LCAAAAAAABAC9lMlqwzAQQO+F/oPJ2Xip4jgBxxBSciltQ13aXsf22IhqCSM5wX9fZyEJ
LXQJ1Ogyo5Hm8ZCY5AkLvUZqb8GC0wWGazUd3AzS6yvHSR6J11yBWHCBDyAxzSyQbVbeypjE/1Ld
3ZkZgzIXHM0uP+20adYai9K7BwU1SlTWmzVWS7Ad1HVeDnTmBdvlOvNG2IZwqrCxBMJ1lk3Xt7jD
9lm/Y3cwzCs2jkZQstEQWZT4R9JnsjSFJsHzE2X4W0oexxAV0SicsCEG48k3lL1fHwzvlatSb4y3
0CRNL8TtD+kHRLDhqr6EFbAqquIqDMsoAAY/s96k6MeJExZWU5shrXmBFz3Zn+3mmrAXvYPVknSn
9g9ux3Q/VRL/fGylH3nEhp/FBAAA#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
BBcAAB+LCAAAAAAABADVmM9v0zAUx+9I/A9RzlXbNMm6Sm2krWzSxMYmWgY35KTuCHPsyXFGw2lC
4jgN8eMGmjQJcQANLghO21+TafsvcJK2a5t1dcJahiq1TfJevu+9j5/tpPoQWmQXUv8eYEDif1yb
4Jpcko27dySpuk7tLRsDtGwj+AA40FgDNl4m1MnvuO1qIXE5djKfQ4tJzN+BNbnhuww6+cc2bpEX
bj70jb9z0lWXctJmNwYtXww/OanuIeZRWMPQYxSgnLThmci27kO/SbYhrpnlMtAtfU6pqBoszldk
CfNQanIvVFmyntmoRbmpXCeYUYLcOD0e6wYlO5Ayv+tTRzbErGG/hLKhK5WcpGilaqFnNMYpzFzu
V2aieYMByjaIazOepmzUuSCkDYtCiCf6NmGHxVLS1VpLu/x2XeNVAlqysY7D39A6ulYtRD89+8ms
QslF0pk6LsZ1TNLRr8OVLMgqsUBcR1Xj4kolUZJxvHp6Ag7xeFCKXKBUFLBvAnMFt2CH+yhJRIW4
5uIEFj3GCJ46ADOSOTv8fP79KDMErl9RhRkMSgpzKOscg4jGAAYhalFvCQfzyIWbtusB1GA+govA
2q4TRKhsNKkHr/IfbE0+z1jbw/k/jc6NtGfqsVInjklm0a5WKMT7R0k3VMIwAGM23lrCwESwNb5e
I54rPJuBG3OD8MxwLRqM8jvnJMe1CEW2eRP5GheHP89PTqqFUO5fyL86Pnt/OiIvUK+BplT5QqZr
wl3ZR5tialR4T4rYX/ZkcqZOP9pnvDZpWafFqD66SH2G1iYRZNnXpvL/ByDlZDMCQBFZ64cApOmA
9ACSeNMDWAUmRFMvPwpVgtOvF3tvg9ffgoPfWTmUNC3VVJQQTgkk3TZByDraJVwb0q2meH58FOx/
CA5+ZUdY4q00nw5hX3Wq/JKPauP4jY/nVsMLPv4IPu1lJ5eh9yLFqVIT2jbEXXd1MLcb2Zd3wZv9
v0GmpEUWKU4Vmfjj1JhghpANHyy4LnR4faHbs+2e8Y0urzWAwRZ0+GNSfsFjxIlqdclNFeWmKmZb
ndfnQEud06DKdwd9pVHlG9zRX6MS5zcLjRsf85MVwxeMsxGi4EX0GJZeq6i29Xa5rSgtvQhUMFnr
iYNmk5NNeYMQ6jcg3bUtmAlZ6uzqhMKZpNfNik8SPLUp5NY/jGeVamHwrbfxB/9PNigEFwAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$textbox5 = New-Object 'System.Windows.Forms.TextBox'
	$button查询 = New-Object 'System.Windows.Forms.Button'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$textbox4 = New-Object 'System.Windows.Forms.TextBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$label快递公司 = New-Object 'System.Windows.Forms.Label'
	$label订单号 = New-Object 'System.Windows.Forms.Label'
	$label地址 = New-Object 'System.Windows.Forms.Label'
	$label姓名 = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$OnLoadFormEvent={
	#TODO: Initialize Form Controls here
	
	}
	
	
	
	
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	<#
	.Synopsis
	   Short description
	.DESCRIPTION
	   Long description
	.EXAMPLE
	   Example of how to use this cmdlet
	.EXAMPLE
	   Another example of how to use this cmdlet
	.INPUTS
	   Inputs to this cmdlet (if any)
	.OUTPUTS
	   Output from this cmdlet (if any)
	.NOTES
	   General notes
	.COMPONENT
	   The component this cmdlet belongs to
	.ROLE
	   The role this cmdlet belongs to
	.FUNCTIONALITY
	   The functionality that best describes this cmdlet
	#>
	function Get-DeliveryInfo
	{
		[CmdletBinding()]
		
		Param
		(
			# Param1 help description
			
			[string]
			$user,
			#[string]$path = ‘c:\users\yli\Documents\Records\xlsx\*.xlsx’,
			[string]$address = ‘*’,
			[string]$courier=’*‘
		)
		
		begin { }
		
		process
		{
			
			$path = ‘c:\users\yli\Documents\Records\xlsx\*.xlsx’
			$result = Get-ChildItem $path -Recurse | Import-Excel | Where-Object { ($_.姓名 -like "*$user*") -and ($_.地址 -like "*$address*") -and ($_.快递公司 -like "*$courier*")}
			
			
			
		}
		
		end
		{
			
			$result
		}
		
	}
	
	$button查询_Click={
		#TODO: Place custom script here
		Get-DeliveryInfo -user $textbox1.Text -address $textbox4.Text -courier $combobox1.Text | Out-GridView
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textbox5 = $textbox5.Text
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_textbox4 = $textbox4.Text
		$script:MainForm_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button查询.remove_Click($button查询_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($textbox5)
	$MainForm.Controls.Add($button查询)
	$MainForm.Controls.Add($combobox1)
	$MainForm.Controls.Add($textbox4)
	$MainForm.Controls.Add($textbox1)
	$MainForm.Controls.Add($label快递公司)
	$MainForm.Controls.Add($label订单号)
	$MainForm.Controls.Add($label地址)
	$MainForm.Controls.Add($label姓名)
	$MainForm.ClientSize = '519, 142'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Main Form"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# textbox5
	#
	$textbox5.Location = '340, 19'
	$textbox5.Name = "textbox5"
	$textbox5.Size = '100, 20'
	$textbox5.TabIndex = 11
	#
	# button查询
	#
	$button查询.Location = '30, 93'
	$button查询.Name = "button查询"
	$button查询.Size = '75, 23'
	$button查询.TabIndex = 10
	$button查询.Text = "查询"
	$button查询.UseVisualStyleBackColor = $True
	$button查询.add_Click($button查询_Click)
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	[void]$combobox1.Items.Add("韵达")
	[void]$combobox1.Items.Add("邮政")
	$combobox1.Location = '339, 54'
	$combobox1.Name = "combobox1"
	$combobox1.Size = '101, 21'
	$combobox1.TabIndex = 9
	#
	# textbox4
	#
	$textbox4.Location = '101, 51'
	$textbox4.Name = "textbox4"
	$textbox4.Size = '100, 20'
	$textbox4.TabIndex = 7
	#
	# textbox1
	#
	$textbox1.Location = '101, 15'
	$textbox1.Name = "textbox1"
	$textbox1.Size = '100, 20'
	$textbox1.TabIndex = 4
	#
	# label快递公司
	#
	$label快递公司.Location = '244, 54'
	$label快递公司.Name = "label快递公司"
	$label快递公司.Size = '100, 23'
	$label快递公司.TabIndex = 3
	$label快递公司.Text = "快递公司"
	#
	# label订单号
	#
	$label订单号.Location = '242, 18'
	$label订单号.Name = "label订单号"
	$label订单号.Size = '100, 23'
	$label订单号.TabIndex = 2
	$label订单号.Text = "订单号"
	#
	# label地址
	#
	$label地址.Location = '24, 54'
	$label地址.Name = "label地址"
	$label地址.Size = '100, 23'
	$label地址.TabIndex = 1
	$label地址.Text = "地址"
	#
	# label姓名
	#
	$label姓名.Location = '24, 14'
	$label姓名.Name = "label姓名"
	$label姓名.Size = '100, 23'
	$label姓名.TabIndex = 0
	$label姓名.Text = "姓名"
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
